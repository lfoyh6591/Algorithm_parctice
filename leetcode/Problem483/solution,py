#very slow but save memory
class Solution:
    def findAnagrams(self, s: str, p: str) -> list[int]:
        res = []
        p_dic = {}
        dic = {}
        state = 0
        for c in p:
            p_dic[c] = p_dic.get(c, 0) + 1
        
        for i in range(len(s)):
            if (i-len(p)) in res and s[i] == s[i-len(p)]:
                res.append(i-len(p)+1)
                    
            else:
                if s[i] not in p:
                    state = 0
                    dic = dict()
                    continue
                if dic.get(s[i], 0) >= p_dic[s[i]]:
                    dic = dict()
                    dic[s[i]] = 1
                    state = 1
                    for j in range(1, len(p)):
                        if dic.get(s[i-j], 0) == p_dic[s[i-j]]:
                            break
                        else:
                            dic[s[i-j]] = dic.get(s[i-j], 0) + 1
                            state += 1
                    continue
                dic[s[i]] = dic.get(s[i], 0) + 1
                state += 1
                if state == len(p) :
                    res.append(i-len(p)+1)
                    state = 0
            
        return res